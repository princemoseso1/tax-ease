import React, { useState } from "react";
import jsPDF from "jspdf";
import logo from "../assets/taxease-logo.png"; //

const TaxCalculator = () => {
  const [income, setIncome] = useState("");
  const [assessableProfits, setAssessableProfits] = useState("");
  const [isSmallCompany, setIsSmallCompany] = useState(false);
  const [isNonResident, setIsNonResident] = useState(false);
  const [subjectToETRRule, setSubjectToETRRule] = useState(false);
  const [result, setResult] = useState(null);

  // PERSONAL INCOME TAX LOGIC
  const calculatePersonalTax = (amount) => {
    let tax = 0;
    let remaining = amount;
    const brackets = [
      { limit: 800000, rate: 0 },
      { limit: 2200000, rate: 0.15 },
      { limit: 9000000, rate: 0.18 },
      { limit: 13000000, rate: 0.21 },
      { limit: 25000000, rate: 0.23 },
      { limit: Infinity, rate: 0.25 },
    ];

    let prevLimit = 0;
    for (let i = 0; i < brackets.length; i++) {
      const taxable = Math.min(remaining, brackets[i].limit - prevLimit);
      tax += taxable * brackets[i].rate;
      remaining -= taxable;
      prevLimit = brackets[i].limit;
      if (remaining <= 0) break;
    }
    return tax;
  };

  // COMPANY INCOME TAX LOGIC
  const calculateCompanyTax = (profit) => {
    let tax = 0;
    let developmentLevy = 0;
    let effectiveTaxRate = 0;

    if (isSmallCompany) {
      tax = 0;
    } else {
      tax = profit * 0.3;
      effectiveTaxRate = (tax / profit) * 100;
      if (subjectToETRRule && effectiveTaxRate < 15) {
        tax = profit * 0.15;
      }
      if (!isNonResident) {
        developmentLevy = profit * 0.04;
      }
    }
    return { tax, developmentLevy };
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    let taxResult;

    if (income) {
      const personalTax = calculatePersonalTax(Number(income));
      taxResult = {
        type: "Personal Income Tax",
        grossIncome: income,
        totalTax: personalTax.toFixed(2),
      };
    } else if (assessableProfits) {
      const { tax, developmentLevy } = calculateCompanyTax(
        Number(assessableProfits)
      );
      taxResult = {
        type: "Company Income Tax",
        assessableProfits,
        totalTax: tax.toFixed(2),
        developmentLevy: developmentLevy.toFixed(2),
      };
    }

    setResult(taxResult);
  };

  // ✅ GENERATE BRANDED PDF REPORT
  const handleDownloadPDF = () => {
    if (!result) return;
    const doc = new jsPDF();

    // HEADER SECTION
    doc.setFillColor(41, 128, 185); // TaxEase blue
    doc.rect(0, 0, 210, 30, "F"); // header bar

    // Add logo (adjust size if needed)
    doc.addImage(logo, "PNG", 15, 5, 22, 22); 

    // Title
    doc.setTextColor(255, 255, 255);
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.text("TaxEase Report", 105, 20, { align: "center" });

    // MAIN BODY
    doc.setTextColor(0, 0, 0);
    let y = 45;
    doc.setFontSize(14);
    doc.text("Tax Summary", 20, y);
    y += 10;

    doc.setFontSize(12);
    doc.text(`Calculation Type: ${result.type}`, 20, y);
    y += 8;

    if (result.grossIncome)
      doc.text(`Annual Income: ₦${Number(result.grossIncome).toLocaleString()}`, 20, y);
    if (result.assessableProfits)
      doc.text(
        `Assessable Profits: ₦${Number(result.assessableProfits).toLocaleString()}`,
        20,
        y
      );
    y += 8;

    doc.text(`Total Tax: ₦${Number(result.totalTax).toLocaleString()}`, 20, y);
    y += 8;

    if (result.developmentLevy) {
      doc.text(
        `Development Levy: ₦${Number(result.developmentLevy).toLocaleString()}`,
        20,
        y
      );
      y += 8;
    }

    if (isSmallCompany)
      doc.text("Company Type: Small Company (Exempted from CIT)", 20, y);
    if (isNonResident)
      doc.text("Status: Non-Resident Company (Levy Exempt)", 20, y);
    if (subjectToETRRule)
      doc.text("Applied: Effective Tax Rate Rule (Min 15%)", 20, y);
    y += 15;

    // DISCLAIMER
    doc.setFont("helvetica", "bold");
    doc.text("Disclaimer", 20, y);
    y += 8;
    doc.setFont("helvetica", "normal");
    doc.setFontSize(10);

    const disclaimerText =
      "This report was generated using the TaxEase Calculator based on the 2025 Nigeria Tax Act. " +
      "The calculations provided are for informational and educational purposes only and do not constitute professional tax advice. " +
      "TaxEase and its developers are not responsible for any decisions made based on this report. " +
      "For official filings or legal interpretations, please consult the Federal Inland Revenue Service (FIRS) or a qualified tax consultant.";

    const splitText = doc.splitTextToSize(disclaimerText, 170);
    doc.text(splitText, 20, y);

    // FOOTER
    doc.setFont("helvetica", "italic");
    doc.setFontSize(10);
    doc.line(20, 282, 190, 282);
    doc.text("Generated by TaxEase – Nigeria’s Smart Tax Assistant", 105, 289, {
      align: "center",
    });
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, 275);

    doc.save("TaxEase_Report.pdf");
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6 flex flex-col items-center">
      <div className="w-full max-w-2xl bg-white shadow-lg rounded-2xl p-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-4 text-center">
          TaxEase Calculator (Nigeria 2025)
        </h1>

        <p className="text-gray-600 text-center mb-6">
          Calculate your <strong>Personal Income Tax (PIT)</strong> or{" "}
          <strong>Company Income Tax (CIT)</strong> under the Nigeria Tax Act
          2025.
        </p>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* PERSONAL TAX */}
          <div className="bg-blue-50 p-4 rounded-xl border">
            <h2 className="text-lg font-semibold text-gray-800 mb-3">
              Personal Income Tax (Individuals)
            </h2>
            <label className="block text-gray-700 mb-2">Annual Income (₦)</label>
            <input
              type="number"
              value={income}
              onChange={(e) => setIncome(e.target.value)}
              placeholder="e.g. 3,500,000"
              className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-400 outline-none"
            />
          </div>

          {/* COMPANY TAX */}
          <div className="bg-green-50 p-4 rounded-xl border">
            <h2 className="text-lg font-semibold text-gray-800 mb-3">
              Company Income Tax (CIT)
            </h2>

            <label className="block text-gray-700 mb-2">
              Company’s Annual Profit (₦)
            </label>
            <input
              type="number"
              value={assessableProfits}
              onChange={(e) => setAssessableProfits(e.target.value)}
              placeholder="e.g. 50,000,000"
              className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-green-400 outline-none"
            />

            <div className="flex items-center gap-2 mt-3">
              <input
                type="checkbox"
                checked={isSmallCompany}
                onChange={(e) => setIsSmallCompany(e.target.checked)}
              />
              <label className="text-gray-700">
                Small Company (turnover below ₦25M)
              </label>
            </div>

            <div className="flex items-center gap-2 mt-2">
              <input
                type="checkbox"
                checked={isNonResident}
                onChange={(e) => setIsNonResident(e.target.checked)}
              />
              <label className="text-gray-700">Non-Resident Company</label>
            </div>

            <div className="flex items-center gap-2 mt-2">
              <input
                type="checkbox"
                checked={subjectToETRRule}
                onChange={(e) => setSubjectToETRRule(e.target.checked)}
              />
              <label className="text-gray-700">
                Apply Effective Tax Rate Rule
              </label>
            </div>
          </div>

          <button
            type="submit"
            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-semibold transition duration-200"
          >
            Calculate Tax
          </button>
        </form>

        {/* TAX RESULT */}
        {result && (
          <div className="mt-6 bg-gray-100 p-4 rounded-xl border text-center">
            <h3 className="text-xl font-semibold text-gray-800 mb-3">
              {result.type} Result
            </h3>
            <p className="text-gray-700">
              <strong>Total Tax:</strong> ₦{result.totalTax}
            </p>
            {result.developmentLevy && (
              <p className="text-gray-700">
                <strong>Development Levy:</strong> ₦{result.developmentLevy}
              </p>
            )}

            <button
              onClick={handleDownloadPDF}
              className="mt-4 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg font-semibold transition duration-200"
            >
              Download Tax Report (PDF)
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default TaxCalculator;
